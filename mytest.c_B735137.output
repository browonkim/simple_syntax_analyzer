 int		shift int
 int		reduce type_specifier -> int
 int a		shift a
 int a		reduce declaration_specifiers -> type_specifier
 int a		reduce direct_declarator -> identifier
 int a ;		shift ;
 int a ;		reduce declarator -> direct_declarator
 int a ;		reduce init_declarator -> declarator
 int a ;		reduce init_declarator_list -> init_declarator
 int a ;		reduce declaration -> declaration_specifiers init_declaratior_list;
		reduce external_declaration -> declaration
		reduce translation_unit -> external_declaration
 char		shift char
 char		reduce type_specifier -> char
 char *		shift * 
 char *		reduce declaration_specifiers -> type_specifier
 char * str		shift str
 char * str		reduce pointer -> *
 char * str		reduce direct_declarator -> identifier
 char * str ;		shift ;
 char * str ;		reduce declarator -> pointer direct_declarator
 char * str ;		reduce init_declarator -> declarator
 char * str ;		reduce init_declarator_list -> init_declarator
 char * str ;		reduce declaration -> declaration_specifiers init_declaratior_list;
		reduce external_declaration -> declaration
		reduce translation_unit -> translation_unit external_declaration
 float		shift float
 float		reduce type_specifier -> float
 float f		shift f
 float f		reduce declaration_specifiers -> type_specifier
 float f		reduce direct_declarator -> identifier
 float f [		shift [ 
 float f [ 10		shift 10
 float f [ 10		reduce primary_expression -> constant 
 float f [ 10		reduce postfix_expression -> primary_expression 
 float f [ 10 ]		shift ] 
 float f [ 10 ]		reduce unary_expression -> postfix_expression
 float f [ 10 ]		reduce cast_expression -> unary_expression
 float f [ 10 ]		reduce multiplicative_expression -> cast_expression
 float f [ 10 ]		reduce additive_expression -> multiplicative_expression
 float f [ 10 ]		reduce shift_expression -> additive_expression
 float f [ 10 ]		reduce relational_expression -> shift_expression
 float f [ 10 ]		reduce equality_expression -> relational_expression
 float f [ 10 ]		reduce and_expression -> equality_expression
 float f [ 10 ]		reduce exclusive_or_expression -> and_expression
 float f [ 10 ]		reduce inclusive_or_expression -> exclusive_or_expression
 float f [ 10 ]		reduce logical_and_expression -> inclusive_or_expression
 float f [ 10 ]		reduce logical_or_expression -> logical_and_expression
 float f [ 10 ]		reduce conditional_expression -> logical_or_expression
 float f [ 10 ]		reduce constant_expression -> conditional_expression
 float f [ 10 ]		reduce direct_declarator -> direct_declarator [constant_expression]
 float f [ 10 ] ;		shift ;
 float f [ 10 ] ;		reduce declarator -> direct_declarator
 float f [ 10 ] ;		reduce init_declarator -> declarator
 float f [ 10 ] ;		reduce init_declarator_list -> init_declarator
 float f [ 10 ] ;		reduce declaration -> declaration_specifiers init_declaratior_list;
		reduce external_declaration -> declaration
		reduce translation_unit -> translation_unit external_declaration
 int		shift int
 int		reduce type_specifier -> int
 int myFunction		shift myFunction
 int myFunction		reduce declaration_specifiers -> type_specifier
 int myFunction		reduce direct_declarator -> identifier
 int myFunction (		shift ( 
 int myFunction ( char		shift char
 int myFunction ( char		reduce type_specifier -> char
 int myFunction ( char *		shift * 
 int myFunction ( char *		reduce declaration_specifiers -> type_specifier
 int myFunction ( char * a		shift a
 int myFunction ( char * a		reduce pointer -> *
 int myFunction ( char * a		reduce direct_declarator -> identifier
 int myFunction ( char * a )		shift ) 
 int myFunction ( char * a )		reduce declarator -> pointer direct_declarator
 int myFunction ( char * a )		reduce parameter_declaration -> declaration_specifiers declarator
 int myFunction ( char * a )		reduce parameter_list -> parameter_declaration
 int myFunction ( char * a )		reduce parameter_type_list -> parameter_list
 int myFunction ( char * a )		reduce direct_declarator -> direct_declarator(parameter_type_list)
 int myFunction ( char * a ) ;		shift ;
 int myFunction ( char * a ) ;		reduce declarator -> direct_declarator
 int myFunction ( char * a ) ;		reduce init_declarator -> declarator
 int myFunction ( char * a ) ;		reduce init_declarator_list -> init_declarator
 int myFunction ( char * a ) ;		reduce declaration -> declaration_specifiers init_declaratior_list;
		reduce external_declaration -> declaration
		reduce translation_unit -> translation_unit external_declaration
 struct		shift struct
 struct		reduce struct_or_union -> struct
 struct alpha		shift alpha
 struct alpha {		shift { <line terminate> 
 int		shift int
 int		reduce type_specifier -> int
 int b		shift b
 int b		reduce specifier_qualifier_list -> type_specifier
 int b		reduce direct_declarator -> identifier
 int b ;		shift ;
 int b ;		reduce declarator -> direct_declarator
 int b ;		reduce struct_declarator -> declarator
 int b ;		reduce struct_declarator_list -> struct_declarator
 int b ;		reduce struct_declaration -> specifier_qualifier_list struct_declarator_list;
		reduce struct_declaration_list -> struct_declaration
 int		shift int
 int		reduce type_specifier -> int
 int c		shift c
 int c		reduce specifier_qualifier_list -> type_specifier
 int c		reduce direct_declarator -> identifier
 int c ;		shift ;
 int c ;		reduce declarator -> direct_declarator
 int c ;		reduce struct_declarator -> declarator
 int c ;		reduce struct_declarator_list -> struct_declarator
 int c ;		reduce struct_declaration -> specifier_qualifier_list struct_declarator_list;
		reduce struct_declaration_list -> struct_declaration_list struct_declaration
 }		shift } <line terminate> 
		reduce struct_or_union_specifier -> struct_or_union identifier {struct_declaration_list}
		reduce type_specifier -> struct_or_union_specifier
 ;		shift ;
 ;		reduce declaration_specifiers -> type_specifier
 ;		reduce declaration -> declaration_specifiers;
		reduce external_declaration -> declaration
		reduce translation_unit -> translation_unit external_declaration
 void		shift void
 void		reduce type_specifier -> void
 void main		shift main
 void main		reduce declaration_specifiers -> type_specifier
 void main		reduce direct_declarator -> identifier
 void main (		shift ( 
 void main ( int		shift int
 void main ( int		reduce type_specifier -> int
 void main ( int argc		shift argc
 void main ( int argc		reduce declaration_specifiers -> type_specifier
 void main ( int argc		reduce direct_declarator -> identifier
 void main ( int argc ,		shift , 
 void main ( int argc ,		reduce declarator -> direct_declarator
 void main ( int argc ,		reduce parameter_declaration -> declaration_specifiers declarator
 void main ( int argc ,		reduce parameter_list -> parameter_declaration
 void main ( int argc , char		shift char
 void main ( int argc , char		reduce type_specifier -> char
 void main ( int argc , char *		shift * 
 void main ( int argc , char *		reduce declaration_specifiers -> type_specifier
 void main ( int argc , char * argv		shift argv
 void main ( int argc , char * argv		reduce pointer -> *
 void main ( int argc , char * argv		reduce direct_declarator -> identifier
 void main ( int argc , char * argv )		shift ) 
 void main ( int argc , char * argv )		reduce declarator -> pointer direct_declarator
 void main ( int argc , char * argv )		reduce parameter_declaration -> declaration_specifiers declarator
 void main ( int argc , char * argv )		reduce parameter_list -> parameter_list ',' parameter_declaration
 void main ( int argc , char * argv )		reduce parameter_type_list -> parameter_list
 void main ( int argc , char * argv )		reduce direct_declarator -> direct_declarator(parameter_type_list)
 void main ( int argc , char * argv ) {		shift { <line terminate> 
		reduce declarator -> direct_declarator
 char		shift char
 char		reduce type_specifier -> char
 char c		shift c
 char c		reduce declaration_specifiers -> type_specifier
 char c		reduce direct_declarator -> identifier
 char c ;		shift ;
 char c ;		reduce declarator -> direct_declarator
 char c ;		reduce init_declarator -> declarator
 char c ;		reduce init_declarator_list -> init_declarator
 char c ;		reduce declaration -> declaration_specifiers init_declaratior_list;
		reduce declaration_list -> declaration
 int		shift int
 int		reduce type_specifier -> int
 int d		shift d
 int d		reduce declaration_specifiers -> type_specifier
 int d		reduce direct_declarator -> identifier
 int d ;		shift ;
 int d ;		reduce declarator -> direct_declarator
 int d ;		reduce init_declarator -> declarator
 int d ;		reduce init_declarator_list -> init_declarator
 int d ;		reduce declaration -> declaration_specifiers init_declaratior_list;
		reduce declaration_list -> declaration_list declaration
 int		shift int
 int		reduce type_specifier -> int
 int i		shift i
 int i		reduce declaration_specifiers -> type_specifier
 int i		reduce direct_declarator -> identifier
 int i =		shift = 
 int i =		reduce declarator -> direct_declarator
 int i = 0		shift 0
 int i = 0		reduce primary_expression -> constant 
 int i = 0		reduce postfix_expression -> primary_expression 
 int i = 0 ;		shift ;
 int i = 0 ;		reduce unary_expression -> postfix_expression
 int i = 0 ;		reduce cast_expression -> unary_expression
 int i = 0 ;		reduce multiplicative_expression -> cast_expression
 int i = 0 ;		reduce additive_expression -> multiplicative_expression
 int i = 0 ;		reduce shift_expression -> additive_expression
 int i = 0 ;		reduce relational_expression -> shift_expression
 int i = 0 ;		reduce equality_expression -> relational_expression
 int i = 0 ;		reduce and_expression -> equality_expression
 int i = 0 ;		reduce exclusive_or_expression -> and_expression
 int i = 0 ;		reduce inclusive_or_expression -> exclusive_or_expression
 int i = 0 ;		reduce logical_and_expression -> inclusive_or_expression
 int i = 0 ;		reduce logical_or_expression -> logical_and_expression
 int i = 0 ;		reduce conditional_expression -> logical_or_expression
 int i = 0 ;		reduce assignment_expression -> conditional_expression 
 int i = 0 ;		reduce initializer -> assignment_expression
 int i = 0 ;		reduce init_declarator -> declarator = initializer
 int i = 0 ;		reduce init_declarator_list -> init_declarator
 int i = 0 ;		reduce declaration -> declaration_specifiers init_declaratior_list;
		reduce declaration_list -> declaration_list declaration
 while		shift while
 while (		shift ( 
 while ( i		shift i
 while ( i		reduce primary_expression -> identifier 
 while ( i		reduce postfix_expression -> primary_expression 
 while ( i <		shift < 
 while ( i <		reduce unary_expression -> postfix_expression
 while ( i <		reduce cast_expression -> unary_expression
 while ( i <		reduce multiplicative_expression -> cast_expression
 while ( i <		reduce additive_expression -> multiplicative_expression
 while ( i <		reduce shift_expression -> additive_expression
 while ( i <		reduce relational_expression -> shift_expression
 while ( i < 10		shift 10
 while ( i < 10		reduce primary_expression -> constant 
 while ( i < 10		reduce postfix_expression -> primary_expression 
 while ( i < 10 )		shift ) 
 while ( i < 10 )		reduce unary_expression -> postfix_expression
 while ( i < 10 )		reduce cast_expression -> unary_expression
 while ( i < 10 )		reduce multiplicative_expression -> cast_expression
 while ( i < 10 )		reduce additive_expression -> multiplicative_expression
 while ( i < 10 )		reduce shift_expression -> additive_expression
 while ( i < 10 )		reduce relational_expression < shift_expression
 while ( i < 10 )		reduce equality_expression -> relational_expression
 while ( i < 10 )		reduce and_expression -> equality_expression
 while ( i < 10 )		reduce exclusive_or_expression -> and_expression
 while ( i < 10 )		reduce inclusive_or_expression -> exclusive_or_expression
 while ( i < 10 )		reduce logical_and_expression -> inclusive_or_expression
 while ( i < 10 )		reduce logical_or_expression -> logical_and_expression
 while ( i < 10 )		reduce conditional_expression -> logical_or_expression
 while ( i < 10 )		reduce assignment_expression -> conditional_expression 
 while ( i < 10 )		reduce expression -> assignment_expression
 while ( i < 10 ) {		shift { <line terminate> 
 a		shift a
 a +=		shift += 
 a +=		reduce primary_expression -> identifier 
 a +=		reduce postfix_expression -> primary_expression 
 a +=		reduce unary_expression -> postfix_expression
 a +=		 reduce assignment_operator -> +=
 a += (		shift ( 
 a += ( d		shift d
 a += ( d		reduce primary_expression -> identifier 
 a += ( d		reduce postfix_expression -> primary_expression 
 a += ( d +		shift + 
 a += ( d +		reduce unary_expression -> postfix_expression
 a += ( d +		reduce cast_expression -> unary_expression
 a += ( d +		reduce multiplicative_expression -> cast_expression
 a += ( d +		reduce additive_expression -> multiplicative_expression
 a += ( d + 1		shift 1
 a += ( d + 1		reduce primary_expression -> constant 
 a += ( d + 1		reduce postfix_expression -> primary_expression 
 a += ( d + 1 )		shift ) 
 a += ( d + 1 )		reduce unary_expression -> postfix_expression
 a += ( d + 1 )		reduce cast_expression -> unary_expression
 a += ( d + 1 )		reduce multiplicative_expression -> cast_expression
 a += ( d + 1 )		reduce additive_expression -> additive_expression + multiplicative_expression
 a += ( d + 1 )		reduce shift_expression -> additive_expression
 a += ( d + 1 )		reduce relational_expression -> shift_expression
 a += ( d + 1 )		reduce equality_expression -> relational_expression
 a += ( d + 1 )		reduce and_expression -> equality_expression
 a += ( d + 1 )		reduce exclusive_or_expression -> and_expression
 a += ( d + 1 )		reduce inclusive_or_expression -> exclusive_or_expression
 a += ( d + 1 )		reduce logical_and_expression -> inclusive_or_expression
 a += ( d + 1 )		reduce logical_or_expression -> logical_and_expression
 a += ( d + 1 )		reduce conditional_expression -> logical_or_expression
 a += ( d + 1 )		reduce assignment_expression -> conditional_expression 
 a += ( d + 1 )		reduce expression -> assignment_expression
 a += ( d + 1 )		reduce primary_expression -> (expression) 
 a += ( d + 1 )		reduce postfix_expression -> primary_expression 
 a += ( d + 1 ) ;		shift ;
 a += ( d + 1 ) ;		reduce unary_expression -> postfix_expression
 a += ( d + 1 ) ;		reduce cast_expression -> unary_expression
 a += ( d + 1 ) ;		reduce multiplicative_expression -> cast_expression
 a += ( d + 1 ) ;		reduce additive_expression -> multiplicative_expression
 a += ( d + 1 ) ;		reduce shift_expression -> additive_expression
 a += ( d + 1 ) ;		reduce relational_expression -> shift_expression
 a += ( d + 1 ) ;		reduce equality_expression -> relational_expression
 a += ( d + 1 ) ;		reduce and_expression -> equality_expression
 a += ( d + 1 ) ;		reduce exclusive_or_expression -> and_expression
 a += ( d + 1 ) ;		reduce inclusive_or_expression -> exclusive_or_expression
 a += ( d + 1 ) ;		reduce logical_and_expression -> inclusive_or_expression
 a += ( d + 1 ) ;		reduce logical_or_expression -> logical_and_expression
 a += ( d + 1 ) ;		reduce conditional_expression -> logical_or_expression
 a += ( d + 1 ) ;		reduce assignment_expression -> conditional_expression 
 a += ( d + 1 ) ;		reduce assignment_expression -> unary_expression assignment_operator assignment_expression
 a += ( d + 1 ) ;		reduce expression -> assignment_expression
 a += ( d + 1 ) ;		reduce expression_statement -> expression;
		reduce statement -> expression_statement 
		reduce statement_list -> statement
 f		shift f
 f [		shift [ 
 f [		reduce primary_expression -> identifier 
 f [		reduce postfix_expression -> primary_expression 
 f [ i		shift i
 f [ i		reduce primary_expression -> identifier 
 f [ i		reduce postfix_expression -> primary_expression 
 f [ i ++		shift ++ 
 f [ i ++		reduce postfix_expression -> postfix_expression++
 f [ i ++ ]		shift ] 
 f [ i ++ ]		reduce unary_expression -> postfix_expression
 f [ i ++ ]		reduce cast_expression -> unary_expression
 f [ i ++ ]		reduce multiplicative_expression -> cast_expression
 f [ i ++ ]		reduce additive_expression -> multiplicative_expression
 f [ i ++ ]		reduce shift_expression -> additive_expression
 f [ i ++ ]		reduce relational_expression -> shift_expression
 f [ i ++ ]		reduce equality_expression -> relational_expression
 f [ i ++ ]		reduce and_expression -> equality_expression
 f [ i ++ ]		reduce exclusive_or_expression -> and_expression
 f [ i ++ ]		reduce inclusive_or_expression -> exclusive_or_expression
 f [ i ++ ]		reduce logical_and_expression -> inclusive_or_expression
 f [ i ++ ]		reduce logical_or_expression -> logical_and_expression
 f [ i ++ ]		reduce conditional_expression -> logical_or_expression
 f [ i ++ ]		reduce assignment_expression -> conditional_expression 
 f [ i ++ ]		reduce expression -> assignment_expression
 f [ i ++ ]		reduce postfix_expression -> postfix_expreesion [expression] 
 f [ i ++ ] =		shift = 
 f [ i ++ ] =		reduce unary_expression -> postfix_expression
 f [ i ++ ] =		 reduce assignment_operator -> =
 f [ i ++ ] = 0		shift 0
 f [ i ++ ] = 0		reduce primary_expression -> constant 
 f [ i ++ ] = 0		reduce postfix_expression -> primary_expression 
 f [ i ++ ] = 0 ;		shift ;
 f [ i ++ ] = 0 ;		reduce unary_expression -> postfix_expression
 f [ i ++ ] = 0 ;		reduce cast_expression -> unary_expression
 f [ i ++ ] = 0 ;		reduce multiplicative_expression -> cast_expression
 f [ i ++ ] = 0 ;		reduce additive_expression -> multiplicative_expression
 f [ i ++ ] = 0 ;		reduce shift_expression -> additive_expression
 f [ i ++ ] = 0 ;		reduce relational_expression -> shift_expression
 f [ i ++ ] = 0 ;		reduce equality_expression -> relational_expression
 f [ i ++ ] = 0 ;		reduce and_expression -> equality_expression
 f [ i ++ ] = 0 ;		reduce exclusive_or_expression -> and_expression
 f [ i ++ ] = 0 ;		reduce inclusive_or_expression -> exclusive_or_expression
 f [ i ++ ] = 0 ;		reduce logical_and_expression -> inclusive_or_expression
 f [ i ++ ] = 0 ;		reduce logical_or_expression -> logical_and_expression
 f [ i ++ ] = 0 ;		reduce conditional_expression -> logical_or_expression
 f [ i ++ ] = 0 ;		reduce assignment_expression -> conditional_expression 
 f [ i ++ ] = 0 ;		reduce assignment_expression -> unary_expression assignment_operator assignment_expression
 f [ i ++ ] = 0 ;		reduce expression -> assignment_expression
 f [ i ++ ] = 0 ;		reduce expression_statement -> expression;
		reduce statement -> expression_statement 
		reduce statement_list -> statement_list statement
 }		shift } <line terminate> 
		reduce compound_statement -> {statement_list}
		reduce statement -> compound_statement 
		reduce iteration_statement -> while(expression) statement
		reduce statement -> iteration_statement
		reduce statement_list -> statement
 struct		shift struct
