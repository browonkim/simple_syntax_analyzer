  int 	 	 shift int

  int a 	 	 shift a <identifier> 


 int a ; 	 	  shift ; <line terminate> 




  char 	 	 shift char

 char * 	 	  shift * 

  char * str 	 	 shift str <identifier> 


 char * str ; 	 	  shift ; <line terminate> 




  float 	 	 shift float

  float f 	 	 shift f <identifier> 


 float f [ 	 	  shift [ 
  float f [ 10 	 	 shift 10 <constant> 
reduce primary_expression -> CONSTANT 
reduce postfix_expression -> primary_expression 
 float f [ 10 ] 	 	  shift ] 















 float f [ 10 ] ; 	 	  shift ; <line terminate> 




  void 	 	 shift void

  void main 	 	 shift main <identifier> 


 void main ( 	 	  shift ( 
  void main ( int 	 	 shift int

  void main ( int argc 	 	 shift argc <identifier> 


 void main ( int argc , 	 	  shift , 



  void main ( int argc , char 	 	 shift char

 void main ( int argc , char * 	 	  shift * 

  void main ( int argc , char * argv 	 	 shift argv <identifier> 


 void main ( int argc , char * argv ) 	 	  shift ) 





 void main ( int argc , char * argv ) { 	 	  shift { <line terminate> 

  char 	 	 shift char

  char c 	 	 shift c <identifier> 


 char c ; 	 	  shift ; <line terminate> 




  int 	 	 shift int

  int d 	 	 shift d <identifier> 


 int d ; 	 	  shift ; <line terminate> 




  int 	 	 shift int

  int i 	 	 shift i <identifier> 


 int i = 	 	  shift = 

  int i = 0 	 	 shift 0 <constant> 
reduce primary_expression -> CONSTANT 
reduce postfix_expression -> primary_expression 
 int i = 0 ; 	 	  shift ; <line terminate> 

















  while 	 	 shift while
 while ( 	 	  shift ( 
  while ( i 	 	 shift i <identifier> 
reduce primary_expression -> IDENTIFIER 
reduce postfix_expression -> primary_expression 
 while ( i < 	 	  shift < 






  while ( i < 10 	 	 shift 10 <constant> 
reduce primary_expression -> CONSTANT 
reduce postfix_expression -> primary_expression 
 while ( i < 10 ) 	 	  shift ) 















 while ( i < 10 ) { 	 	  shift { <line terminate> 
  a 	 	 shift a <identifier> 
 a += 	 	  shift += 
reduce primary_expression -> IDENTIFIER 
reduce postfix_expression -> primary_expression 


 a += ( 	 	  shift ( 
  a += ( d 	 	 shift d <identifier> 
reduce primary_expression -> IDENTIFIER 
reduce postfix_expression -> primary_expression 
 a += ( d + 	 	  shift + 




  a += ( d + 1 	 	 shift 1 <constant> 
reduce primary_expression -> CONSTANT 
reduce postfix_expression -> primary_expression 
 a += ( d + 1 ) 	 	  shift ) 















reduce primary_expression -> ( expression ) -> 
reduce postfix_expression -> primary_expression 
 a += ( d + 1 ) ; 	 	  shift ; <line terminate> 
















  f 	 	 shift f <identifier> 
 f [ 	 	  shift [ 
reduce primary_expression -> IDENTIFIER 
reduce postfix_expression -> primary_expression 
  f [ i 	 	 shift i <identifier> 
reduce primary_expression -> IDENTIFIER 
reduce postfix_expression -> primary_expression 
 f [ i ++ 	 	  shift ++ 

 f [ i ++ ] 	 	  shift ] 
















 f [ i ++ ] = 	 	  shift = 


  f [ i ++ ] = 0 	 	 shift 0 <constant> 
reduce primary_expression -> CONSTANT 
reduce postfix_expression -> primary_expression 
 f [ i ++ ] = 0 ; 	 	  shift ; <line terminate> 
















 } 	 	  shift } <line terminate> 
  return 	 	 shift return
 return ; 	 	  shift ; <line terminate> 
 } 	 	  shift } <line terminate> 
  int 	 	 shift int

  int myFunction 	 	 shift myFunction <identifier> 


 int myFunction ( 	 	  shift ( 
  int myFunction ( char 	 	 shift char

 int myFunction ( char * 	 	  shift * 

  int myFunction ( char * str 	 	 shift str <identifier> 


 int myFunction ( char * str ) 	 	  shift ) 





 int myFunction ( char * str ) { 	 	  shift { <line terminate> 

  char 	 	 shift char

  char c 	 	 shift c <identifier> 


 char c ; 	 	  shift ; <line terminate> 




  if 	 	 shift if
 if ( 	 	  shift ( 
  if ( c 	 	 shift c <identifier> 
reduce primary_expression -> IDENTIFIER 
reduce postfix_expression -> primary_expression 
 if ( c != 	 	  shift != 







  if ( c != 'c' 	 	 shift 'c' <constant> 
reduce primary_expression -> CONSTANT 
reduce postfix_expression -> primary_expression 
 if ( c != 'c' ) 	 	  shift ) 















 if ( c != 'c' ) { 	 	  shift { <line terminate> 
  str 	 	 shift str <identifier> 
 str = 	 	  shift = 
reduce primary_expression -> IDENTIFIER 
reduce postfix_expression -> primary_expression 


  str = strdup 	 	 shift strdup <identifier> 
reduce primary_expression -> IDENTIFIER 
reduce postfix_expression -> primary_expression 
 str = strdup ( 	 	  shift ( 
  str = strdup ( "test" 		 shift "test" <string_literal> 
reduce primary_expression -> STRING_LITERAL 
reduce postfix_expression -> primary_expression 
 str = strdup ( "test" ) 	 	  shift ) 
















 str = strdup ( "test" ) ; 	 	  shift ; <line terminate> 
















  printf 	 	 shift printf <identifier> 
 printf ( 	 	  shift ( 
reduce primary_expression -> IDENTIFIER 
reduce postfix_expression -> primary_expression 
  printf ( "test" 		 shift "test" <string_literal> 
reduce primary_expression -> STRING_LITERAL 
reduce postfix_expression -> primary_expression 
 printf ( "test" ) 	 	  shift ) 
















 printf ( "test" ) ; 	 	  shift ; <line terminate> 















 } 	 	  shift } <line terminate> 
  return 	 	 shift return
  return 0 	 	 shift 0 <constant> 
reduce primary_expression -> CONSTANT 
reduce postfix_expression -> primary_expression 
 return 0 ; 	 	  shift ; <line terminate> 















 } 	 	  shift } <line terminate> 
