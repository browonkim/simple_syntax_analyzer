 int		shift int
 int		reduce type_specifier -> int
 int a		shift a
 int a		reduce declaration_specifiers -> type_specifier
 int a		reduce direct_declarator -> identifier
 int a ;		shift ;
 int a ;		reduce declarator -> direct_declarator
 int a ;		reduce init_declarator -> declarator
 int a ;		reduce init_declarator_list -> init_declarator
 int a ;		reduce declaration -> declaration_specifiers init_declaratior_list;
		reduce 
		reduce 
 char		shift char
 char		reduce type_specifier -> char
 char *		shift * 
 char *		reduce declaration_specifiers -> type_specifier
 char * str		shift str
 char * str		reduce pointer -> *
 char * str		reduce direct_declarator -> identifier
 char * str ;		shift ;
 char * str ;		reduce declarator -> pointer direct_declarator
 char * str ;		reduce init_declarator -> declarator
 char * str ;		reduce init_declarator_list -> init_declarator
 char * str ;		reduce declaration -> declaration_specifiers init_declaratior_list;
		reduce 
		reduce 
 float		shift float
 float		reduce type_specifier -> float
 float f		shift f
 float f		reduce declaration_specifiers -> type_specifier
 float f		reduce direct_declarator -> identifier
 float f [		shift [ 
 float f [ 10		shift 10
 float f [ 10		reduce primary_expression -> constant 
 float f [ 10		reduce postfix_expression -> primary_expression 
 float f [ 10 ]		shift ] 
 float f [ 10 ]		reduce unary_expression -> postfix_expression
 float f [ 10 ]		reduce cast_expression -> unary_expression
 float f [ 10 ]		reduce multiplicative_expression -> cast_expression
 float f [ 10 ]		reduce additive_expression -> multiplicative_expression
 float f [ 10 ]		reduce shift_expression -> additive_expression
 float f [ 10 ]		reduce relational_expression -> shift_expression
 float f [ 10 ]		reduce equality_expression -> relational_expression
 float f [ 10 ]		reduce and_expression -> equality_expression
 float f [ 10 ]		reduce exclusive_or_expression -> and_expression
 float f [ 10 ]		reduce inclusive_or_expression -> exclusive_or_expression
 float f [ 10 ]		reduce logical_and_expression -> inclusive_or_expression
 float f [ 10 ]		reduce logical_or_expression -> logical_and_expression
 float f [ 10 ]		reduce conditional_expression -> logical_or_expression
 float f [ 10 ]		reduce constant_expression -> conditional_expression
 float f [ 10 ]		reduce direct_declarator -> direct_declarator [constant_expression]
 float f [ 10 ] ;		shift ;
 float f [ 10 ] ;		reduce declarator -> direct_declarator
 float f [ 10 ] ;		reduce init_declarator -> declarator
 float f [ 10 ] ;		reduce init_declarator_list -> init_declarator
 float f [ 10 ] ;		reduce declaration -> declaration_specifiers init_declaratior_list;
		reduce 
		reduce 
 int		shift int
 int		reduce type_specifier -> int
 int myFunction		shift myFunction
 int myFunction		reduce declaration_specifiers -> type_specifier
 int myFunction		reduce direct_declarator -> identifier
 int myFunction (		shift ( 
 int myFunction ( char		shift char
 int myFunction ( char		reduce type_specifier -> char
 int myFunction ( char *		shift * 
 int myFunction ( char *		reduce declaration_specifiers -> type_specifier
 int myFunction ( char * a		shift a
 int myFunction ( char * a		reduce pointer -> *
 int myFunction ( char * a		reduce direct_declarator -> identifier
 int myFunction ( char * a )		shift ) 
 int myFunction ( char * a )		reduce declarator -> pointer direct_declarator
 int myFunction ( char * a )		reduce parameter_declaration -> declaration_specifiers declarator
 int myFunction ( char * a )		reduce parameter_list -> parameter_declaration
 int myFunction ( char * a )		reduce parameter_type_list -> parameter_list
 int myFunction ( char * a )		reduce direct_declarator -> direct_declarator(parameter_type_list)
 int myFunction ( char * a ) ;		shift ;
 int myFunction ( char * a ) ;		reduce declarator -> direct_declarator
 int myFunction ( char * a ) ;		reduce init_declarator -> declarator
 int myFunction ( char * a ) ;		reduce init_declarator_list -> init_declarator
 int myFunction ( char * a ) ;		reduce declaration -> declaration_specifiers init_declaratior_list;
		reduce 
		reduce 
 void		shift void
 void		reduce type_specifier -> void
 void main		shift main
 void main		reduce declaration_specifiers -> type_specifier
 void main		reduce direct_declarator -> identifier
 void main (		shift ( 
 void main ( int		shift int
 void main ( int		reduce type_specifier -> int
 void main ( int argc		shift argc
 void main ( int argc		reduce declaration_specifiers -> type_specifier
 void main ( int argc		reduce direct_declarator -> identifier
 void main ( int argc ,		shift , 
 void main ( int argc ,		reduce declarator -> direct_declarator
 void main ( int argc ,		reduce parameter_declaration -> declaration_specifiers declarator
 void main ( int argc ,		reduce parameter_list -> parameter_declaration
 void main ( int argc , char		shift char
 void main ( int argc , char		reduce type_specifier -> char
 void main ( int argc , char *		shift * 
 void main ( int argc , char *		reduce declaration_specifiers -> type_specifier
 void main ( int argc , char * argv		shift argv
 void main ( int argc , char * argv		reduce pointer -> *
 void main ( int argc , char * argv		reduce direct_declarator -> identifier
 void main ( int argc , char * argv )		shift ) 
 void main ( int argc , char * argv )		reduce declarator -> pointer direct_declarator
 void main ( int argc , char * argv )		reduce parameter_declaration -> declaration_specifiers declarator
 void main ( int argc , char * argv )		reduce parameter_list -> parameter_list ',' parameter_declaration
 void main ( int argc , char * argv )		reduce parameter_type_list -> parameter_list
 void main ( int argc , char * argv )		reduce direct_declarator -> direct_declarator(parameter_type_list)
 void main ( int argc , char * argv ) {		shift { <line terminate> 
		reduce declarator -> direct_declarator
 char		shift char
 char		reduce type_specifier -> char
 char c		shift c
 char c		reduce declaration_specifiers -> type_specifier
 char c		reduce direct_declarator -> identifier
 char c ;		shift ;
 char c ;		reduce declarator -> direct_declarator
 char c ;		reduce init_declarator -> declarator
 char c ;		reduce init_declarator_list -> init_declarator
 char c ;		reduce declaration -> declaration_specifiers init_declaratior_list;
		reduce 
 int		shift int
 int		reduce type_specifier -> int
 int d		shift d
 int d		reduce declaration_specifiers -> type_specifier
 int d		reduce direct_declarator -> identifier
 int d ;		shift ;
 int d ;		reduce declarator -> direct_declarator
 int d ;		reduce init_declarator -> declarator
 int d ;		reduce init_declarator_list -> init_declarator
 int d ;		reduce declaration -> declaration_specifiers init_declaratior_list;
		reduce 
 int		shift int
 int		reduce type_specifier -> int
 int i		shift i
 int i		reduce declaration_specifiers -> type_specifier
 int i		reduce direct_declarator -> identifier
 int i =		shift = 
 int i =		reduce declarator -> direct_declarator
 int i = 0		shift 0
 int i = 0		reduce primary_expression -> constant 
 int i = 0		reduce postfix_expression -> primary_expression 
 int i = 0 ;		shift ;
 int i = 0 ;		reduce unary_expression -> postfix_expression
 int i = 0 ;		reduce cast_expression -> unary_expression
 int i = 0 ;		reduce multiplicative_expression -> cast_expression
 int i = 0 ;		reduce additive_expression -> multiplicative_expression
 int i = 0 ;		reduce shift_expression -> additive_expression
 int i = 0 ;		reduce relational_expression -> shift_expression
 int i = 0 ;		reduce equality_expression -> relational_expression
 int i = 0 ;		reduce and_expression -> equality_expression
 int i = 0 ;		reduce exclusive_or_expression -> and_expression
 int i = 0 ;		reduce inclusive_or_expression -> exclusive_or_expression
 int i = 0 ;		reduce logical_and_expression -> inclusive_or_expression
 int i = 0 ;		reduce logical_or_expression -> logical_and_expression
 int i = 0 ;		reduce conditional_expression -> logical_or_expression
 int i = 0 ;		reduce assignment_expression -> conditional_expression 
 int i = 0 ;		reduce initializer -> assignment_expression
 int i = 0 ;		reduce init_declarator -> declarator = initializer
 int i = 0 ;		reduce init_declarator_list -> init_declarator
 int i = 0 ;		reduce declaration -> declaration_specifiers init_declaratior_list;
		reduce 
 while		shift while
 while (		shift ( 
 while ( i		shift i
 while ( i		reduce primary_expression -> identifier 
 while ( i		reduce postfix_expression -> primary_expression 
 while ( i <		shift < 
 while ( i <		reduce unary_expression -> postfix_expression
 while ( i <		reduce cast_expression -> unary_expression
 while ( i <		reduce multiplicative_expression -> cast_expression
 while ( i <		reduce additive_expression -> multiplicative_expression
 while ( i <		reduce shift_expression -> additive_expression
 while ( i <		reduce relational_expression -> shift_expression
 while ( i < 10		shift 10
 while ( i < 10		reduce primary_expression -> constant 
 while ( i < 10		reduce postfix_expression -> primary_expression 
 while ( i < 10 )		shift ) 
 while ( i < 10 )		reduce unary_expression -> postfix_expression
 while ( i < 10 )		reduce cast_expression -> unary_expression
 while ( i < 10 )		reduce multiplicative_expression -> cast_expression
 while ( i < 10 )		reduce additive_expression -> multiplicative_expression
 while ( i < 10 )		reduce shift_expression -> additive_expression
 while ( i < 10 )		reduce relational_expression < shift_expression
 while ( i < 10 )		reduce equality_expression -> relational_expression
 while ( i < 10 )		reduce and_expression -> equality_expression
 while ( i < 10 )		reduce exclusive_or_expression -> and_expression
 while ( i < 10 )		reduce inclusive_or_expression -> exclusive_or_expression
 while ( i < 10 )		reduce logical_and_expression -> inclusive_or_expression
 while ( i < 10 )		reduce logical_or_expression -> logical_and_expression
 while ( i < 10 )		reduce conditional_expression -> logical_or_expression
 while ( i < 10 )		reduce assignment_expression -> conditional_expression 
 while ( i < 10 )		reduce expression -> assignment_expression
 while ( i < 10 ) {		shift { <line terminate> 
 a		shift a
 a +=		shift += 
 a +=		reduce primary_expression -> identifier 
 a +=		reduce postfix_expression -> primary_expression 
 a +=		reduce unary_expression -> postfix_expression
 a +=		 reduce assignment_operator -> +=
 a += (		shift ( 
 a += ( d		shift d
 a += ( d		reduce primary_expression -> identifier 
 a += ( d		reduce postfix_expression -> primary_expression 
 a += ( d +		shift + 
 a += ( d +		reduce unary_expression -> postfix_expression
 a += ( d +		reduce cast_expression -> unary_expression
 a += ( d +		reduce multiplicative_expression -> cast_expression
 a += ( d +		reduce additive_expression -> multiplicative_expression
 a += ( d + 1		shift 1
 a += ( d + 1		reduce primary_expression -> constant 
 a += ( d + 1		reduce postfix_expression -> primary_expression 
 a += ( d + 1 )		shift ) 
 a += ( d + 1 )		reduce unary_expression -> postfix_expression
 a += ( d + 1 )		reduce cast_expression -> unary_expression
 a += ( d + 1 )		reduce multiplicative_expression -> cast_expression
 a += ( d + 1 )		reduce additive_expression -> additive_expression + multiplicative_expression
 a += ( d + 1 )		reduce shift_expression -> additive_expression
 a += ( d + 1 )		reduce relational_expression -> shift_expression
 a += ( d + 1 )		reduce equality_expression -> relational_expression
 a += ( d + 1 )		reduce and_expression -> equality_expression
 a += ( d + 1 )		reduce exclusive_or_expression -> and_expression
 a += ( d + 1 )		reduce inclusive_or_expression -> exclusive_or_expression
 a += ( d + 1 )		reduce logical_and_expression -> inclusive_or_expression
 a += ( d + 1 )		reduce logical_or_expression -> logical_and_expression
 a += ( d + 1 )		reduce conditional_expression -> logical_or_expression
 a += ( d + 1 )		reduce assignment_expression -> conditional_expression 
 a += ( d + 1 )		reduce expression -> assignment_expression
 a += ( d + 1 )		reduce primary_expression -> (expression) 
 a += ( d + 1 )		reduce postfix_expression -> primary_expression 
 a += ( d + 1 ) ;		shift ;
 a += ( d + 1 ) ;		reduce unary_expression -> postfix_expression
 a += ( d + 1 ) ;		reduce cast_expression -> unary_expression
 a += ( d + 1 ) ;		reduce multiplicative_expression -> cast_expression
 a += ( d + 1 ) ;		reduce additive_expression -> multiplicative_expression
 a += ( d + 1 ) ;		reduce shift_expression -> additive_expression
 a += ( d + 1 ) ;		reduce relational_expression -> shift_expression
 a += ( d + 1 ) ;		reduce equality_expression -> relational_expression
 a += ( d + 1 ) ;		reduce and_expression -> equality_expression
 a += ( d + 1 ) ;		reduce exclusive_or_expression -> and_expression
 a += ( d + 1 ) ;		reduce inclusive_or_expression -> exclusive_or_expression
 a += ( d + 1 ) ;		reduce logical_and_expression -> inclusive_or_expression
 a += ( d + 1 ) ;		reduce logical_or_expression -> logical_and_expression
 a += ( d + 1 ) ;		reduce conditional_expression -> logical_or_expression
 a += ( d + 1 ) ;		reduce assignment_expression -> conditional_expression 
 a += ( d + 1 ) ;		reduce assignment_expression -> unary_expression assignment_operator assignment_expression
 a += ( d + 1 ) ;		reduce expression -> assignment_expression
 a += ( d + 1 ) ;		reduce 
		reduce statement -> expression_statement 
		reduce 
 f		shift f
 f [		shift [ 
 f [		reduce primary_expression -> identifier 
 f [		reduce postfix_expression -> primary_expression 
 f [ i		shift i
 f [ i		reduce primary_expression -> identifier 
 f [ i		reduce postfix_expression -> primary_expression 
 f [ i ++		shift ++ 
 f [ i ++		reduce postfix_expression -> postfix_expression++
 f [ i ++ ]		shift ] 
 f [ i ++ ]		reduce unary_expression -> postfix_expression
 f [ i ++ ]		reduce cast_expression -> unary_expression
 f [ i ++ ]		reduce multiplicative_expression -> cast_expression
 f [ i ++ ]		reduce additive_expression -> multiplicative_expression
 f [ i ++ ]		reduce shift_expression -> additive_expression
 f [ i ++ ]		reduce relational_expression -> shift_expression
 f [ i ++ ]		reduce equality_expression -> relational_expression
 f [ i ++ ]		reduce and_expression -> equality_expression
 f [ i ++ ]		reduce exclusive_or_expression -> and_expression
 f [ i ++ ]		reduce inclusive_or_expression -> exclusive_or_expression
 f [ i ++ ]		reduce logical_and_expression -> inclusive_or_expression
 f [ i ++ ]		reduce logical_or_expression -> logical_and_expression
 f [ i ++ ]		reduce conditional_expression -> logical_or_expression
 f [ i ++ ]		reduce assignment_expression -> conditional_expression 
 f [ i ++ ]		reduce expression -> assignment_expression
 f [ i ++ ]		reduce postfix_expression -> postfix_expreesion [expression] 
 f [ i ++ ] =		shift = 
 f [ i ++ ] =		reduce unary_expression -> postfix_expression
 f [ i ++ ] =		 reduce assignment_operator -> =
 f [ i ++ ] = 0		shift 0
 f [ i ++ ] = 0		reduce primary_expression -> constant 
 f [ i ++ ] = 0		reduce postfix_expression -> primary_expression 
 f [ i ++ ] = 0 ;		shift ;
 f [ i ++ ] = 0 ;		reduce unary_expression -> postfix_expression
 f [ i ++ ] = 0 ;		reduce cast_expression -> unary_expression
 f [ i ++ ] = 0 ;		reduce multiplicative_expression -> cast_expression
 f [ i ++ ] = 0 ;		reduce additive_expression -> multiplicative_expression
 f [ i ++ ] = 0 ;		reduce shift_expression -> additive_expression
 f [ i ++ ] = 0 ;		reduce relational_expression -> shift_expression
 f [ i ++ ] = 0 ;		reduce equality_expression -> relational_expression
 f [ i ++ ] = 0 ;		reduce and_expression -> equality_expression
 f [ i ++ ] = 0 ;		reduce exclusive_or_expression -> and_expression
 f [ i ++ ] = 0 ;		reduce inclusive_or_expression -> exclusive_or_expression
 f [ i ++ ] = 0 ;		reduce logical_and_expression -> inclusive_or_expression
 f [ i ++ ] = 0 ;		reduce logical_or_expression -> logical_and_expression
 f [ i ++ ] = 0 ;		reduce conditional_expression -> logical_or_expression
 f [ i ++ ] = 0 ;		reduce assignment_expression -> conditional_expression 
 f [ i ++ ] = 0 ;		reduce assignment_expression -> unary_expression assignment_operator assignment_expression
 f [ i ++ ] = 0 ;		reduce expression -> assignment_expression
 f [ i ++ ] = 0 ;		reduce 
		reduce statement -> expression_statement 
		reduce 
 }		shift } <line terminate> 
		reduce 
		reduce statement -> compound_statement 
		reduce 
		reduce statement -> iteration_statement
		reduce 
 return		shift return
 return ;		shift ;
 return ;		reduce 
		reduce statement -> jump_statement 
		reduce 
 }		shift } <line terminate> 
		reduce 
		reduce 
		reduce 
		reduce 
 int		shift int
 int		reduce type_specifier -> int
 int myFunction		shift myFunction
 int myFunction		reduce declaration_specifiers -> type_specifier
 int myFunction		reduce direct_declarator -> identifier
 int myFunction (		shift ( 
 int myFunction ( char		shift char
 int myFunction ( char		reduce type_specifier -> char
 int myFunction ( char *		shift * 
 int myFunction ( char *		reduce declaration_specifiers -> type_specifier
 int myFunction ( char * str		shift str
 int myFunction ( char * str		reduce pointer -> *
 int myFunction ( char * str		reduce direct_declarator -> identifier
 int myFunction ( char * str )		shift ) 
 int myFunction ( char * str )		reduce declarator -> pointer direct_declarator
 int myFunction ( char * str )		reduce parameter_declaration -> declaration_specifiers declarator
 int myFunction ( char * str )		reduce parameter_list -> parameter_declaration
 int myFunction ( char * str )		reduce parameter_type_list -> parameter_list
 int myFunction ( char * str )		reduce direct_declarator -> direct_declarator(parameter_type_list)
 int myFunction ( char * str ) {		shift { <line terminate> 
		reduce declarator -> direct_declarator
 char		shift char
 char		reduce type_specifier -> char
 char c		shift c
 char c		reduce declaration_specifiers -> type_specifier
 char c		reduce direct_declarator -> identifier
 char c ;		shift ;
 char c ;		reduce declarator -> direct_declarator
 char c ;		reduce init_declarator -> declarator
 char c ;		reduce init_declarator_list -> init_declarator
 char c ;		reduce declaration -> declaration_specifiers init_declaratior_list;
		reduce 
 if		shift if
 if (		shift ( 
 if ( c		shift c
 if ( c		reduce primary_expression -> identifier 
 if ( c		reduce postfix_expression -> primary_expression 
 if ( c !=		shift != 
 if ( c !=		reduce unary_expression -> postfix_expression
 if ( c !=		reduce cast_expression -> unary_expression
 if ( c !=		reduce multiplicative_expression -> cast_expression
 if ( c !=		reduce additive_expression -> multiplicative_expression
 if ( c !=		reduce shift_expression -> additive_expression
 if ( c !=		reduce relational_expression -> shift_expression
 if ( c !=		reduce equality_expression -> relational_expression
 if ( c != 'c'		shift 'c'
 if ( c != 'c'		reduce primary_expression -> constant 
 if ( c != 'c'		reduce postfix_expression -> primary_expression 
 if ( c != 'c' )		shift ) 
 if ( c != 'c' )		reduce unary_expression -> postfix_expression
 if ( c != 'c' )		reduce cast_expression -> unary_expression
 if ( c != 'c' )		reduce multiplicative_expression -> cast_expression
 if ( c != 'c' )		reduce additive_expression -> multiplicative_expression
 if ( c != 'c' )		reduce shift_expression -> additive_expression
 if ( c != 'c' )		reduce relational_expression -> shift_expression
 if ( c != 'c' )		reduce equality_expression -> equality_expression != relational_expression
 if ( c != 'c' )		reduce and_expression -> equality_expression
 if ( c != 'c' )		reduce exclusive_or_expression -> and_expression
 if ( c != 'c' )		reduce inclusive_or_expression -> exclusive_or_expression
 if ( c != 'c' )		reduce logical_and_expression -> inclusive_or_expression
 if ( c != 'c' )		reduce logical_or_expression -> logical_and_expression
 if ( c != 'c' )		reduce conditional_expression -> logical_or_expression
 if ( c != 'c' )		reduce assignment_expression -> conditional_expression 
 if ( c != 'c' )		reduce expression -> assignment_expression
 if ( c != 'c' ) {		shift { <line terminate> 
 str		shift str
 str =		shift = 
 str =		reduce primary_expression -> identifier 
 str =		reduce postfix_expression -> primary_expression 
 str =		reduce unary_expression -> postfix_expression
 str =		 reduce assignment_operator -> =
 str = strdup		shift strdup
 str = strdup		reduce primary_expression -> identifier 
 str = strdup		reduce postfix_expression -> primary_expression 
 str = strdup (		shift ( 
 str = strdup ( "test"		shift "test"
 str = strdup ( "test"		reduce primary_expression -> string literal 
 str = strdup ( "test"		reduce postfix_expression -> primary_expression 
 str = strdup ( "test" )		shift ) 
 str = strdup ( "test" )		reduce unary_expression -> postfix_expression
 str = strdup ( "test" )		reduce cast_expression -> unary_expression
 str = strdup ( "test" )		reduce multiplicative_expression -> cast_expression
 str = strdup ( "test" )		reduce additive_expression -> multiplicative_expression
 str = strdup ( "test" )		reduce shift_expression -> additive_expression
 str = strdup ( "test" )		reduce relational_expression -> shift_expression
 str = strdup ( "test" )		reduce equality_expression -> relational_expression
 str = strdup ( "test" )		reduce and_expression -> equality_expression
 str = strdup ( "test" )		reduce exclusive_or_expression -> and_expression
 str = strdup ( "test" )		reduce inclusive_or_expression -> exclusive_or_expression
 str = strdup ( "test" )		reduce logical_and_expression -> inclusive_or_expression
 str = strdup ( "test" )		reduce logical_or_expression -> logical_and_expression
 str = strdup ( "test" )		reduce conditional_expression -> logical_or_expression
 str = strdup ( "test" )		reduce assignment_expression -> conditional_expression 
 str = strdup ( "test" )		reduce argument_expression_list -> assignment_expression
 str = strdup ( "test" )		reduce postfix_expression -> postfix_expression(argument_expression_list)
 str = strdup ( "test" ) ;		shift ;
 str = strdup ( "test" ) ;		reduce unary_expression -> postfix_expression
 str = strdup ( "test" ) ;		reduce cast_expression -> unary_expression
 str = strdup ( "test" ) ;		reduce multiplicative_expression -> cast_expression
 str = strdup ( "test" ) ;		reduce additive_expression -> multiplicative_expression
 str = strdup ( "test" ) ;		reduce shift_expression -> additive_expression
 str = strdup ( "test" ) ;		reduce relational_expression -> shift_expression
 str = strdup ( "test" ) ;		reduce equality_expression -> relational_expression
 str = strdup ( "test" ) ;		reduce and_expression -> equality_expression
 str = strdup ( "test" ) ;		reduce exclusive_or_expression -> and_expression
 str = strdup ( "test" ) ;		reduce inclusive_or_expression -> exclusive_or_expression
 str = strdup ( "test" ) ;		reduce logical_and_expression -> inclusive_or_expression
 str = strdup ( "test" ) ;		reduce logical_or_expression -> logical_and_expression
 str = strdup ( "test" ) ;		reduce conditional_expression -> logical_or_expression
 str = strdup ( "test" ) ;		reduce assignment_expression -> conditional_expression 
 str = strdup ( "test" ) ;		reduce assignment_expression -> unary_expression assignment_operator assignment_expression
 str = strdup ( "test" ) ;		reduce expression -> assignment_expression
 str = strdup ( "test" ) ;		reduce 
		reduce statement -> expression_statement 
		reduce 
 printf		shift printf
 printf (		shift ( 
 printf (		reduce primary_expression -> identifier 
 printf (		reduce postfix_expression -> primary_expression 
 printf ( "test"		shift "test"
 printf ( "test"		reduce primary_expression -> string literal 
 printf ( "test"		reduce postfix_expression -> primary_expression 
 printf ( "test" )		shift ) 
 printf ( "test" )		reduce unary_expression -> postfix_expression
 printf ( "test" )		reduce cast_expression -> unary_expression
 printf ( "test" )		reduce multiplicative_expression -> cast_expression
 printf ( "test" )		reduce additive_expression -> multiplicative_expression
 printf ( "test" )		reduce shift_expression -> additive_expression
 printf ( "test" )		reduce relational_expression -> shift_expression
 printf ( "test" )		reduce equality_expression -> relational_expression
 printf ( "test" )		reduce and_expression -> equality_expression
 printf ( "test" )		reduce exclusive_or_expression -> and_expression
 printf ( "test" )		reduce inclusive_or_expression -> exclusive_or_expression
 printf ( "test" )		reduce logical_and_expression -> inclusive_or_expression
 printf ( "test" )		reduce logical_or_expression -> logical_and_expression
 printf ( "test" )		reduce conditional_expression -> logical_or_expression
 printf ( "test" )		reduce assignment_expression -> conditional_expression 
 printf ( "test" )		reduce argument_expression_list -> assignment_expression
 printf ( "test" )		reduce postfix_expression -> postfix_expression(argument_expression_list)
 printf ( "test" ) ;		shift ;
 printf ( "test" ) ;		reduce unary_expression -> postfix_expression
 printf ( "test" ) ;		reduce cast_expression -> unary_expression
 printf ( "test" ) ;		reduce multiplicative_expression -> cast_expression
 printf ( "test" ) ;		reduce additive_expression -> multiplicative_expression
 printf ( "test" ) ;		reduce shift_expression -> additive_expression
 printf ( "test" ) ;		reduce relational_expression -> shift_expression
 printf ( "test" ) ;		reduce equality_expression -> relational_expression
 printf ( "test" ) ;		reduce and_expression -> equality_expression
 printf ( "test" ) ;		reduce exclusive_or_expression -> and_expression
 printf ( "test" ) ;		reduce inclusive_or_expression -> exclusive_or_expression
 printf ( "test" ) ;		reduce logical_and_expression -> inclusive_or_expression
 printf ( "test" ) ;		reduce logical_or_expression -> logical_and_expression
 printf ( "test" ) ;		reduce conditional_expression -> logical_or_expression
 printf ( "test" ) ;		reduce assignment_expression -> conditional_expression 
 printf ( "test" ) ;		reduce expression -> assignment_expression
 printf ( "test" ) ;		reduce 
		reduce statement -> expression_statement 
		reduce 
 }		shift } <line terminate> 
		reduce 
		reduce statement -> compound_statement 
 return		shift return
 return		reduce 
 return		reduce statement -> selection_statement
 return		reduce 
 return 0		shift 0
 return 0		reduce primary_expression -> constant 
 return 0		reduce postfix_expression -> primary_expression 
 return 0 ;		shift ;
 return 0 ;		reduce unary_expression -> postfix_expression
 return 0 ;		reduce cast_expression -> unary_expression
 return 0 ;		reduce multiplicative_expression -> cast_expression
 return 0 ;		reduce additive_expression -> multiplicative_expression
 return 0 ;		reduce shift_expression -> additive_expression
 return 0 ;		reduce relational_expression -> shift_expression
 return 0 ;		reduce equality_expression -> relational_expression
 return 0 ;		reduce and_expression -> equality_expression
 return 0 ;		reduce exclusive_or_expression -> and_expression
 return 0 ;		reduce inclusive_or_expression -> exclusive_or_expression
 return 0 ;		reduce logical_and_expression -> inclusive_or_expression
 return 0 ;		reduce logical_or_expression -> logical_and_expression
 return 0 ;		reduce conditional_expression -> logical_or_expression
 return 0 ;		reduce assignment_expression -> conditional_expression 
 return 0 ;		reduce expression -> assignment_expression
 return 0 ;		reduce 
		reduce statement -> jump_statement 
		reduce 
 int		shift int
